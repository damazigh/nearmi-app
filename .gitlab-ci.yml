variables:
  APP_CONTAINER_NAME: react-app
  APP_IMAGE_NAME: 'nearmi.io/nearmi-dev/app'
  APP_PORTS: '8081:80'
  TAG: ''
stages:
  - deploy
docker-img:
  stage: deploy
  script:
    - |
      ENV=${TARGET_ENV};
      if [[ -z ${ENV} ]];
      then
        ENV="dev";
      fi
      TARGET_ENV=${ENV};
      TAG=$(sed 's/.*"version": "\(.*\)".*/\1/;t;d' ./package.json);
      echo "building image nearmi-${ENV}/app:${TAG}";
      docker build -f ./Dockerfile -t nearmi-${ENV}/app:${TAG} .;
      docker tag nearmi-${ENV}/app:${TAG} nearmi.io/nearmi-${ENV}/app:${TAG};
      echo "push built image"
      docker push nearmi.io/nearmi-${ENV}/app:${TAG};
      echo "Cleaning dangling images";
      docker image prune -af;

  tags:
    - shell
docker-run:
  stage: deploy
  script:
    - |
      echo "TARGET_ENV : ${TARGET_ENV}"
      TAG=$(sed 's/.*"version": "\(.*\)".*/\1/;t;d' ./package.json);
      if [[ ${TARGET_ENV}="dev" ]];
      then
        x=$(docker container ls -a | grep ${APP_CONTAINER_NAME});
        if [[ ! -z ${x} ]];
      then;
        echo "stopping container "${APP_CONTAINER_NAME};
        docker container stop ${APP_CONTAINER_NAME};
      fi
        echo "pulling new images for ${APP_CONTAINER_NAME}:${TAG}";
        docker pull ${APP_IMAGE_NAME}:${TAG};
        docker run -d -p ${APP_PORTS} --name ${APP_CONTAINER_NAME} ${APP_IMAGE_NAME}:${TAG};
      fi
      echo "Au revoir !";
  tags:
    - shell
